version: '3.8'

services:
  redis:
    image: redis:7.0
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
  user-service:
    build: .
    ports:
      - "5000:5000"
    environment:
      SERVICE: user
      DB_USER: user
      DB_PASSWORD: secret
      DB_HOST: postgres
      DB_NAME: social
      JWT_SECRET: super-secret-key
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_started
      redis:
        condition: service_healthy
    restart: on-failure

  wall-service:
    build: .
    ports:
      - "5001:5001"
    environment:
      SERVICE: wall
      DB_USER: user
      DB_PASSWORD: secret
      DB_HOST: postgres
      DB_NAME: social
      JWT_SECRET: super-secret-key
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure

  message-service:
    build: .
    ports:
      - "5002:5002"
    environment:
      SERVICE: message
      MONGO_HOST: mongo
      JWT_SECRET: super-secret-key
    depends_on:
      mongo:
        condition: service_started
    restart: on-failure

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: social
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_postgres.sql:/docker-entrypoint-initdb.d/02-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d social"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: always

  mongo:
    image: mongo:6.0
    volumes:
      - mongo_data:/data/db
      - ./init_mongo.js:/docker-entrypoint-initdb.d/init.js
    restart: always

volumes:
  postgres_data:
  mongo_data:
  redis_data: